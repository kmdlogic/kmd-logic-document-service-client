// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.DocumentService.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class CompanyDocumentRequest
    {
        /// <summary>
        /// Initializes a new instance of the CompanyDocumentRequest class.
        /// </summary>
        public CompanyDocumentRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CompanyDocumentRequest class.
        /// </summary>
        /// <param name="companyDocumentType">Possible values include:
        /// 'Document', 'DigitalPostCoverLetter',
        /// 'SnailMailCoverLetter'</param>
        /// <param name="status">Possible values include: 'InProgress',
        /// 'Completed', 'Failed'</param>
        public CompanyDocumentRequest(System.Guid documentConfigurationId, IList<string> cvrs, System.Guid? id = default(System.Guid?), string companyDocumentType = default(string), string documentUrl = default(string), int? retentionPeriodInDays = default(int?), string status = default(string), string fileName = default(string), string documentName = default(string), string sender = default(string), string documentComment = default(string))
        {
            Id = id;
            DocumentConfigurationId = documentConfigurationId;
            Cvrs = cvrs;
            CompanyDocumentType = companyDocumentType;
            DocumentUrl = documentUrl;
            RetentionPeriodInDays = retentionPeriodInDays;
            Status = status;
            FileName = fileName;
            DocumentName = documentName;
            Sender = sender;
            DocumentComment = documentComment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "documentConfigurationId")]
        public System.Guid DocumentConfigurationId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cvrs")]
        public IList<string> Cvrs { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Document',
        /// 'DigitalPostCoverLetter', 'SnailMailCoverLetter'
        /// </summary>
        [JsonProperty(PropertyName = "companyDocumentType")]
        public string CompanyDocumentType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "documentUrl")]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "retentionPeriodInDays")]
        public int? RetentionPeriodInDays { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'InProgress', 'Completed',
        /// 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "documentName")]
        public string DocumentName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sender")]
        public string Sender { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "documentComment")]
        public string DocumentComment { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Cvrs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Cvrs");
            }
            if (DocumentName != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(DocumentName, "^[a-zA-Z0-9-_']+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "DocumentName", "^[a-zA-Z0-9-_']+$");
                }
            }
        }
    }
}
